#!/usr/bin/env python3

# This is a modification of Proton's default_pfx.py to make it work with vanilla Wine
# This makes Wine prefixes way smaller by using symlinks instead of copying DLLs
# https://github.com/ValveSoftware/Proton/blob/575d9bc1f96f6dc4551338d050e787158312d605/default_pfx.py

# Original code under 3-Clause BSD License :
#
# Copyright (c) 2018-2020, Valve Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation and/or
# other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
# may be used to endorse or promote products derived from this software without
# specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# usage: proton_build_prefix [dest_folder]
# You may need to update the path to Wine libraries folders if it's installed differently on your system

"Helper module for building the default prefix"

import os
import subprocess

def file_is_wine_builtin_dll(path):
    if not os.path.exists(path):
        return False
    try:
        sfile = open(path, "rb")
        sfile.seek(0x40)
        tag = sfile.read(20)
        return tag.startswith((b"Wine placeholder DLL", b"Wine builtin DLL"))
    except IOError:
        return False

def little_endian_bytes_to_uint(b):
    result = 0
    multiplier = 1
    for i in b:
        result += i * multiplier
        multiplier <<= 8
    return result

def dll_bitness(path):
    if not os.path.exists(path):
        return 0
    try:
        sfile = open(path, "rb")
        sfile.seek(0x3c)
        ntheader_ofs = little_endian_bytes_to_uint(sfile.read(4))
        sfile.seek(0x18 + ntheader_ofs)
        magic = sfile.read(2)
        if magic == bytes((11, 1)):
            return 32
        if magic == bytes((11, 2)):
            return 64
        return 0
    except IOError:
        return 0

def setup_dll_symlinks(default_pfx_dir):
    skip_dlls = [ 'amd_ags_x64.dll' ]
    for walk_dir, dirs, files in os.walk(default_pfx_dir):
        for file_ in files:
            filename = os.path.join(walk_dir, file_)
            if file_ in skip_dlls:
                continue
            if os.path.isfile(filename) and file_is_wine_builtin_dll(filename):
                bitness = dll_bitness(filename)
                if bitness == 32:
                    libdir = "/usr/lib32/wine/i386-windows/"
                elif bitness == 64:
                    libdir = "/usr/lib/wine/x86_64-windows/"
                else:
                    continue
                if os.path.exists(os.path.join(libdir, file_)):
                    target = os.path.join(libdir, file_)
                elif os.path.exists(os.path.join(libdir, 'fakedlls', file_)):
                    target = os.path.join(libdir, 'fakedlls', file_)
                else:
                    continue
                os.unlink(filename)
                # We use absolute ones instead
                # make_relative_symlink(target, filename)
                os.symlink(target, filename)

def make_default_pfx(default_pfx_dir):
    local_env = dict(os.environ)

    local_env["WINEPREFIX"] = os.path.abspath(default_pfx_dir)
    local_env["WINEDEBUG"] = "-all"

    subprocess.run(["/bin/bash", "-c",
        "wine wineboot && " +
        "wineserver -w"],
        env=local_env, check=True)

    setup_dll_symlinks(default_pfx_dir)

if __name__ == '__main__':
    import sys
    make_default_pfx(sys.argv[1])
